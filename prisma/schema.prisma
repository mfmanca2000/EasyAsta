generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  name          String?
  image         String?
  role          UserRole          @default(PLAYER)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  emailVerified DateTime?
  isBot         Boolean           @default(false)
  accounts      Account[]
  adminActions  AdminAction[]     @relation("AdminUser")
  adminLeagues  League[]          @relation("LeagueAdmin")
  selections    PlayerSelection[]
  sessions      Session[]
  teams         Team[]
}

model League {
  id           String         @id @default(cuid())
  name         String
  adminId      String
  credits      Int            @default(500)
  status       LeagueStatus   @default(SETUP)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  adminActions AdminAction[]
  config       AuctionConfig?
  rounds       AuctionRound[]
  botConfig    BotConfig?
  admin        User           @relation("LeagueAdmin", fields: [adminId], references: [id])
  players      Player[]
  teams        Team[]
}

model Team {
  id               String        @id @default(cuid())
  name             String
  userId           String
  leagueId         String
  remainingCredits Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  adminActions     AdminAction[] @relation("AdminTargetTeam")
  league           League        @relation(fields: [leagueId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  teamPlayers      TeamPlayer[]

  @@unique([userId, leagueId])
}

model Player {
  id           String            @id @default(cuid())
  name         String
  position     Position
  realTeam     String
  price        Int
  leagueId     String
  isAssigned   Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  adminActions AdminAction[]     @relation("AdminTargetPlayer")
  league       League            @relation(fields: [leagueId], references: [id])
  selections   PlayerSelection[]
  teamPlayers  TeamPlayer[]
}

model TeamPlayer {
  id         String   @id @default(cuid())
  teamId     String
  playerId   String
  acquiredAt DateTime @default(now())
  player     Player   @relation(fields: [playerId], references: [id])
  team       Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, playerId])
}

model AuctionRound {
  id           String            @id @default(cuid())
  leagueId     String
  position     Position
  roundNumber  Int
  status       RoundStatus       @default(SELECTION)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  adminActions AdminAction[]     @relation("AdminTargetRound")
  league       League            @relation(fields: [leagueId], references: [id])
  selections   PlayerSelection[]
}

model PlayerSelection {
  id               String       @id @default(cuid())
  roundId          String
  userId           String
  playerId         String
  randomNumber     Int?
  isWinner         Boolean      @default(false)
  createdAt        DateTime     @default(now())
  adminReason      String?
  isAdminSelection Boolean      @default(false)
  player           Player       @relation(fields: [playerId], references: [id])
  round            AuctionRound @relation(fields: [roundId], references: [id])
  user             User         @relation(fields: [userId], references: [id])

  @@unique([roundId, userId])
}

model AuctionConfig {
  id                  String   @id @default(cuid())
  leagueId            String   @unique
  timeoutSeconds      Int      @default(30)
  autoSelectOnTimeout Boolean  @default(true)
  pauseOnDisconnect   Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  league              League   @relation(fields: [leagueId], references: [id])
}

model AdminAction {
  id           String          @id @default(cuid())
  leagueId     String
  adminId      String
  action       AdminActionType
  targetTeamId String?
  playerId     String?
  roundId      String?
  reason       String?
  metadata     Json?
  createdAt    DateTime        @default(now())
  admin        User            @relation("AdminUser", fields: [adminId], references: [id])
  league       League          @relation(fields: [leagueId], references: [id])
  player       Player?         @relation("AdminTargetPlayer", fields: [playerId], references: [id])
  round        AuctionRound?   @relation("AdminTargetRound", fields: [roundId], references: [id])
  targetTeam   Team?           @relation("AdminTargetTeam", fields: [targetTeamId], references: [id])
}

model BotConfig {
  id                String          @id @default(cuid())
  leagueId          String          @unique
  isEnabled         Boolean         @default(false)
  selectionDelayMin Int             @default(2)
  selectionDelayMax Int             @default(8)
  intelligence      BotIntelligence @default(MEDIUM)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  league            League          @relation(fields: [leagueId], references: [id])
}

enum UserRole {
  PLAYER
  ADMIN
}

enum LeagueStatus {
  SETUP
  AUCTION
  COMPLETED
}

enum Position {
  P
  D
  C
  A
}

enum RoundStatus {
  SELECTION
  RESOLUTION
  COMPLETED
}

enum AdminActionType {
  ADMIN_SELECT
  CANCEL_SELECTION
  FORCE_RESOLUTION
  RESET_ROUND
  TIMEOUT_CONFIG
  EMERGENCY_PAUSE
  BACKUP_RESTORE
}

enum BotIntelligence {
  LOW
  MEDIUM
  HIGH
}
